!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddMultigridTask	backup/mg_task_list.cpp	/^void MultigridTaskList::AddMultigridTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:MultigridTaskList
AddMultigridTask	mg_task_list.cpp	/^void MultigridTaskList::AddMultigridTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:MultigridTaskList
AddSourceTermsDustFluids	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddSourceTermsDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddSourceTermsHydro	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddSourceTermsHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddTask	backup/fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:FFTGravitySolverTaskList
AddTask	backup/sts_task_list.cpp	/^void SuperTimeStepTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:SuperTimeStepTaskList
AddTask	backup/time_integrator.cpp	/^void TimeIntegratorTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:TimeIntegratorTaskList
AddTask	fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:FFTGravitySolverTaskList
AddTask	sts_task_list.cpp	/^void SuperTimeStepTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:SuperTimeStepTaskList
AddTask	time_integrator.cpp	/^void TimeIntegratorTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:TimeIntegratorTaskList
CalculateDustFluidsFlux	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateDustFluidsFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateDustFluidsFlux_STS	backup/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateDustFluidsFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateDustFluidsFlux_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateDustFluidsFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateEMF	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateEMF	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateEMF_STS	backup/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateEMF_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateEMF_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateEMF_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateHydroFlux	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateHydroFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateHydroFlux_STS	backup/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateHydroFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateHydroFlux_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateHydroFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CheckDependencies	backup/task_id.cpp	/^bool TaskID::CheckDependencies(const TaskID& dep) const {$/;"	f	class:TaskID
CheckDependencies	task_id.cpp	/^bool TaskID::CheckDependencies(const TaskID& dep) const {$/;"	f	class:TaskID
CheckRefinement	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CheckRefinement(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CheckRefinement	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CheckRefinement(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Clear	backup/task_id.cpp	/^void TaskID::Clear() {$/;"	f	class:TaskID
Clear	task_id.cpp	/^void TaskID::Clear() {$/;"	f	class:TaskID
ClearAllBoundary	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ClearAllBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ClearAllBoundary	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ClearAllBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ClearBoundary	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearBoundaryFace	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearBoundaryFace	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearFFTGravityBoundary	backup/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ClearFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
ClearFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ClearFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
ClearTaskList	backup/mg_task_list.hpp	/^  void ClearTaskList() {ntasks=0;}$/;"	f	class:MultigridTaskList
ClearTaskList	mg_task_list.hpp	/^  void ClearTaskList() {ntasks=0;}$/;"	f	class:MultigridTaskList
DiffuseDustFluids	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseField	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseHydro	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DoAllAvailableTasks	backup/mg_task_list.cpp	/^TaskListStatus MultigridTaskList::DoAllAvailableTasks(Multigrid *pmg, TaskStates &ts) {$/;"	f	class:MultigridTaskList
DoAllAvailableTasks	backup/task_list.cpp	/^TaskListStatus TaskList::DoAllAvailableTasks(MeshBlock *pmb, int stage, TaskStates &ts) {$/;"	f	class:TaskList
DoAllAvailableTasks	mg_task_list.cpp	/^TaskListStatus MultigridTaskList::DoAllAvailableTasks(Multigrid *pmg, TaskStates &ts) {$/;"	f	class:MultigridTaskList
DoAllAvailableTasks	task_list.cpp	/^TaskListStatus TaskList::DoAllAvailableTasks(MeshBlock *pmb, int stage, TaskStates &ts) {$/;"	f	class:TaskList
DoTaskListOneStage	backup/mg_task_list.cpp	/^void MultigridTaskList::DoTaskListOneStage(MultigridDriver *pmd) {$/;"	f	class:MultigridTaskList
DoTaskListOneStage	backup/task_list.cpp	/^void TaskList::DoTaskListOneStage(Mesh *pmesh, int stage) {$/;"	f	class:TaskList
DoTaskListOneStage	mg_task_list.cpp	/^void MultigridTaskList::DoTaskListOneStage(MultigridDriver *pmd) {$/;"	f	class:MultigridTaskList
DoTaskListOneStage	task_list.cpp	/^void TaskList::DoTaskListOneStage(Mesh *pmesh, int stage) {$/;"	f	class:TaskList
DustGasDrag	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DustGasDrag(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DustGasDrag	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DustGasDrag(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
FFTGravitySolverTaskList	backup/fft_grav_task_list.cpp	/^FFTGravitySolverTaskList::FFTGravitySolverTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:FFTGravitySolverTaskList
FFTGravitySolverTaskList	backup/fft_grav_task_list.hpp	/^class FFTGravitySolverTaskList : public TaskList {$/;"	c
FFTGravitySolverTaskList	fft_grav_task_list.cpp	/^FFTGravitySolverTaskList::FFTGravitySolverTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:FFTGravitySolverTaskList
FFTGravitySolverTaskList	fft_grav_task_list.hpp	/^class FFTGravitySolverTaskList : public TaskList {$/;"	c
FFTGravitySolverTaskNames	backup/fft_grav_task_list.hpp	/^namespace FFTGravitySolverTaskNames {$/;"	n
FFTGravitySolverTaskNames	fft_grav_task_list.hpp	/^namespace FFTGravitySolverTaskNames {$/;"	n
FMGProlongate	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::FMGProlongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
FMGProlongate	mg_task_list.cpp	/^TaskStatus MultigridTaskList::FMGProlongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
HydroIntegratorTaskNames	backup/task_list.hpp	/^namespace HydroIntegratorTaskNames {$/;"	n
HydroIntegratorTaskNames	task_list.hpp	/^namespace HydroIntegratorTaskNames {$/;"	n
IntegrateDustFluids	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateDustFluids_STS	backup/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateDustFluids_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateDustFluids_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateDustFluids_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateField	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateField_STS	backup/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateField_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateField_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateField_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateHydro	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateHydro_STS	backup/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateHydro_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateHydro_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateHydro_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegratorWeight	backup/task_list.hpp	/^  struct IntegratorWeight {$/;"	s	class:TimeIntegratorTaskList
IntegratorWeight	task_list.hpp	/^  struct IntegratorWeight {$/;"	s	class:TimeIntegratorTaskList
IsUnfinished	backup/task_id.cpp	/^bool TaskID::IsUnfinished(const TaskID& id) const {$/;"	f	class:TaskID
IsUnfinished	task_id.cpp	/^bool TaskID::IsUnfinished(const TaskID& id) const {$/;"	f	class:TaskID
MGTask	backup/mg_task_list.hpp	/^struct MGTask {$/;"	s
MGTask	mg_task_list.hpp	/^struct MGTask {$/;"	s
MultigridTaskList	backup/mg_task_list.hpp	/^  explicit MultigridTaskList(MultigridDriver *pmd) : ntasks(0), pmy_mgdriver_(pmd),$/;"	f	class:MultigridTaskList
MultigridTaskList	backup/mg_task_list.hpp	/^class MultigridTaskList {$/;"	c
MultigridTaskList	mg_task_list.hpp	/^  explicit MultigridTaskList(MultigridDriver *pmd) : ntasks(0), pmy_mgdriver_(pmd),$/;"	f	class:MultigridTaskList
MultigridTaskList	mg_task_list.hpp	/^class MultigridTaskList {$/;"	c
MultigridTaskNames	backup/mg_task_list.hpp	/^namespace MultigridTaskNames {$/;"	n
MultigridTaskNames	mg_task_list.hpp	/^namespace MultigridTaskNames {$/;"	n
NewBlockTimeStep	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::NewBlockTimeStep(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
NewBlockTimeStep	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::NewBlockTimeStep(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
PhysicalBoundary	backup/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
PhysicalBoundary	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::PhysicalBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
PhysicalBoundary	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
PhysicalBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
PhysicalBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::PhysicalBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
PhysicalBoundary	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
PhysicalBoundary_STS	backup/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::PhysicalBoundary_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
PhysicalBoundary_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::PhysicalBoundary_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
Primitives	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Primitives(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Primitives	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Primitives(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Prolongate	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::Prolongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
Prolongate	mg_task_list.cpp	/^TaskStatus MultigridTaskList::Prolongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
Prolongation	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Prolongation(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Prolongation	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Prolongation(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectEMF	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectEMF	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectHydroFlux	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectHydroFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveBoundary	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveBoundaryFace	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveBoundaryFace	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveDustFluids	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsFlux	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveEMFShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveEMFShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFFTGravityBoundary	backup/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ReceiveFFTGravityBoundary(MeshBlock *pmb,$/;"	f	class:FFTGravitySolverTaskList
ReceiveFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ReceiveFFTGravityBoundary(MeshBlock *pmb,$/;"	f	class:FFTGravitySolverTaskList
ReceiveField	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFieldShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFieldShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydro	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
RemapEMFShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::RemapEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
RemapEMFShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::RemapEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Reset	backup/task_list.hpp	/^  void Reset(int ntasks) {$/;"	f	struct:TaskStates
Reset	task_list.hpp	/^  void Reset(int ntasks) {$/;"	f	struct:TaskStates
Restrict	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::Restrict(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
Restrict	mg_task_list.cpp	/^TaskStatus MultigridTaskList::Restrict(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundary	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundaryFace	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundaryFace	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendDustFluids	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsFlux	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMF	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMF	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMFShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMFShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFFTGravityBoundary	backup/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SendFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SendFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SendFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SendField	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFieldShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFieldShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydro	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroFlux	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroShear	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesDustFluids	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesField	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesHydro	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetFFTGravityBoundary	backup/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SetFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SetFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SetFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SetFinished	backup/task_id.cpp	/^void TaskID::SetFinished(const TaskID& id) {$/;"	f	class:TaskID
SetFinished	task_id.cpp	/^void TaskID::SetFinished(const TaskID& id) {$/;"	f	class:TaskID
SetMGTaskListFMGProlongate	backup/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListFMGProlongate(int flag) {$/;"	f	class:MultigridTaskList
SetMGTaskListFMGProlongate	mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListFMGProlongate(int flag) {$/;"	f	class:MultigridTaskList
SetMGTaskListToCoarser	backup/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToCoarser(int nsmooth, int ngh) {$/;"	f	class:MultigridTaskList
SetMGTaskListToCoarser	mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToCoarser(int nsmooth, int ngh) {$/;"	f	class:MultigridTaskList
SetMGTaskListToFiner	backup/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToFiner(int nsmooth, int ngh, int flag) {$/;"	f	class:MultigridTaskList
SetMGTaskListToFiner	mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToFiner(int nsmooth, int ngh, int flag) {$/;"	f	class:MultigridTaskList
SmoothBlack	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothBlack(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SmoothBlack	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothBlack(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SmoothRed	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothRed(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SmoothRed	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothRed(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceive	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceive(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceive	mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceive(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceiveFace	backup/mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceiveFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceiveFace	mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceiveFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartupTaskList	backup/fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
StartupTaskList	backup/sts_task_list.cpp	/^void SuperTimeStepTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
StartupTaskList	backup/time_integrator.cpp	/^void TimeIntegratorTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
StartupTaskList	fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
StartupTaskList	sts_task_list.cpp	/^void SuperTimeStepTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
StartupTaskList	time_integrator.cpp	/^void TimeIntegratorTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SuperTimeStepTaskList	backup/sts_task_list.cpp	/^SuperTimeStepTaskList::SuperTimeStepTaskList($/;"	f	class:SuperTimeStepTaskList
SuperTimeStepTaskList	backup/task_list.hpp	/^class SuperTimeStepTaskList : public TaskList {$/;"	c
SuperTimeStepTaskList	sts_task_list.cpp	/^SuperTimeStepTaskList::SuperTimeStepTaskList($/;"	f	class:SuperTimeStepTaskList
SuperTimeStepTaskList	task_list.hpp	/^class SuperTimeStepTaskList : public TaskList {$/;"	c
TASK_LIST_FFT_GRAV_TASK_LIST_HPP_	backup/fft_grav_task_list.hpp	/^#define TASK_LIST_FFT_GRAV_TASK_LIST_HPP_$/;"	d
TASK_LIST_FFT_GRAV_TASK_LIST_HPP_	fft_grav_task_list.hpp	/^#define TASK_LIST_FFT_GRAV_TASK_LIST_HPP_$/;"	d
TASK_LIST_MG_TASK_LIST_HPP_	backup/mg_task_list.hpp	/^#define TASK_LIST_MG_TASK_LIST_HPP_$/;"	d
TASK_LIST_MG_TASK_LIST_HPP_	mg_task_list.hpp	/^#define TASK_LIST_MG_TASK_LIST_HPP_$/;"	d
TASK_LIST_TASK_LIST_HPP_	backup/task_list.hpp	/^#define TASK_LIST_TASK_LIST_HPP_$/;"	d
TASK_LIST_TASK_LIST_HPP_	task_list.hpp	/^#define TASK_LIST_TASK_LIST_HPP_$/;"	d
Task	backup/task_list.hpp	/^struct Task { \/\/ aggregate and POD$/;"	s
Task	task_list.hpp	/^struct Task { \/\/ aggregate and POD$/;"	s
TaskFunc	backup/mg_task_list.hpp	/^  TaskStatus (MultigridTaskList::*TaskFunc)(Multigrid*);  \/\/ ptr to a task$/;"	m	struct:MGTask
TaskFunc	backup/task_list.hpp	/^  TaskStatus (TaskList::*TaskFunc)(MeshBlock*, int);  \/\/ ptr to member function$/;"	m	struct:Task
TaskFunc	mg_task_list.hpp	/^  TaskStatus (MultigridTaskList::*TaskFunc)(Multigrid*);  \/\/ ptr to a task$/;"	m	struct:MGTask
TaskFunc	task_list.hpp	/^  TaskStatus (TaskList::*TaskFunc)(MeshBlock*, int);  \/\/ ptr to member function$/;"	m	struct:Task
TaskID	backup/task_id.cpp	/^TaskID::TaskID(unsigned int id) {$/;"	f	class:TaskID
TaskID	backup/task_list.hpp	/^class TaskID {  \/\/ POD but not aggregate (there is a user-provided ctor)$/;"	c
TaskID	task_id.cpp	/^TaskID::TaskID(unsigned int id) {$/;"	f	class:TaskID
TaskID	task_list.hpp	/^class TaskID {  \/\/ POD but not aggregate (there is a user-provided ctor)$/;"	c
TaskList	backup/task_list.hpp	/^  TaskList() : ntasks(0), nstages(0), task_list_{} {} \/\/ 2x direct + zero initialization$/;"	f	class:TaskList
TaskList	backup/task_list.hpp	/^class TaskList {$/;"	c
TaskList	task_list.hpp	/^  TaskList() : ntasks(0), nstages(0), task_list_{} {} \/\/ 2x direct + zero initialization$/;"	f	class:TaskList
TaskList	task_list.hpp	/^class TaskList {$/;"	c
TaskListStatus	backup/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	c
TaskListStatus	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	c
TaskStates	backup/task_list.hpp	/^struct TaskStates { \/\/ aggregate and POD$/;"	s
TaskStates	task_list.hpp	/^struct TaskStates { \/\/ aggregate and POD$/;"	s
TaskStatus	backup/task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	c
TaskStatus	task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	c
TimeIntegratorTaskList	backup/task_list.hpp	/^class TimeIntegratorTaskList : public TaskList {$/;"	c
TimeIntegratorTaskList	backup/time_integrator.cpp	/^TimeIntegratorTaskList::TimeIntegratorTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:TimeIntegratorTaskList
TimeIntegratorTaskList	task_list.hpp	/^class TimeIntegratorTaskList : public TaskList {$/;"	c
TimeIntegratorTaskList	time_integrator.cpp	/^TimeIntegratorTaskList::TimeIntegratorTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:TimeIntegratorTaskList
UserWork	backup/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::UserWork(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
UserWork	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::UserWork(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
beta	backup/task_list.hpp	/^    Real beta; \/\/ coeff. from bidiagonal Shu-Osher form Beta matrix, -1 diagonal terms$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
beta	task_list.hpp	/^    Real beta; \/\/ coeff. from bidiagonal Shu-Osher form Beta matrix, -1 diagonal terms$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
bitfld_	backup/task_list.hpp	/^  std::uint64_t bitfld_[kNField_];$/;"	m	class:TaskID
bitfld_	task_list.hpp	/^  std::uint64_t bitfld_[kNField_];$/;"	m	class:TaskID
cfl_limit	backup/task_list.hpp	/^  Real cfl_limit; \/\/ dt stability limit for the particular time integrator + spatial order$/;"	m	class:TimeIntegratorTaskList
cfl_limit	task_list.hpp	/^  Real cfl_limit; \/\/ dt stability limit for the particular time integrator + spatial order$/;"	m	class:TimeIntegratorTaskList
complete	backup/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
complete	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
delta	backup/task_list.hpp	/^    Real delta; \/\/ low-storage coefficients to avoid double F() evaluation per substage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
delta	task_list.hpp	/^    Real delta; \/\/ low-storage coefficients to avoid double F() evaluation per substage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
dependency	backup/mg_task_list.hpp	/^  TaskID dependency;   \/\/ encodes dependencies to other tasks using " " " "$/;"	m	struct:MGTask
dependency	backup/task_list.hpp	/^  TaskID dependency; \/\/ encodes dependencies to other tasks using " " " "$/;"	m	struct:Task
dependency	mg_task_list.hpp	/^  TaskID dependency;   \/\/ encodes dependencies to other tasks using " " " "$/;"	m	struct:MGTask
dependency	task_list.hpp	/^  TaskID dependency; \/\/ encodes dependencies to other tasks using " " " "$/;"	m	struct:Task
fail	backup/task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
fail	task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
finished_tasks	backup/task_list.hpp	/^  TaskID finished_tasks;$/;"	m	struct:TaskStates
finished_tasks	task_list.hpp	/^  TaskID finished_tasks;$/;"	m	struct:TaskStates
gamma_1	backup/task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_1	task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_2	backup/task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_2	task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_3	backup/task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_3	task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
indx_first_task	backup/task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
indx_first_task	task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
integrator	backup/task_list.hpp	/^  std::string integrator;$/;"	m	class:TimeIntegratorTaskList
integrator	task_list.hpp	/^  std::string integrator;$/;"	m	class:TimeIntegratorTaskList
kNField_	backup/task_list.hpp	/^  constexpr static int kNField_ = 1;$/;"	m	class:TaskID
kNField_	task_list.hpp	/^  constexpr static int kNField_ = 1;$/;"	m	class:TaskID
lb_time	backup/task_list.hpp	/^  bool lb_time; \/\/ flag for automatic load balancing based on timing$/;"	m	struct:Task
lb_time	task_list.hpp	/^  bool lb_time; \/\/ flag for automatic load balancing based on timing$/;"	m	struct:Task
nstages	backup/task_list.hpp	/^  int nstages;    \/\/ number of times the tasklist is repeated per each full timestep$/;"	m	class:TaskList
nstages	task_list.hpp	/^  int nstages;    \/\/ number of times the tasklist is repeated per each full timestep$/;"	m	class:TaskList
ntasks	backup/mg_task_list.hpp	/^  int ntasks;     \/\/ number of tasks in this list$/;"	m	class:MultigridTaskList
ntasks	backup/task_list.hpp	/^  int ntasks;     \/\/ number of tasks in this list$/;"	m	class:TaskList
ntasks	mg_task_list.hpp	/^  int ntasks;     \/\/ number of tasks in this list$/;"	m	class:MultigridTaskList
ntasks	task_list.hpp	/^  int ntasks;     \/\/ number of tasks in this list$/;"	m	class:TaskList
num_tasks_left	backup/task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
num_tasks_left	task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
operator ==	backup/task_id.cpp	/^bool TaskID::operator== (const TaskID& rhs) const {$/;"	f	class:TaskID
operator ==	task_id.cpp	/^bool TaskID::operator== (const TaskID& rhs) const {$/;"	f	class:TaskID
operator |	backup/task_id.cpp	/^TaskID TaskID::operator| (const TaskID& rhs) const {$/;"	f	class:TaskID
operator |	task_id.cpp	/^TaskID TaskID::operator| (const TaskID& rhs) const {$/;"	f	class:TaskID
override	backup/fft_grav_task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:FFTGravitySolverTaskList
override	backup/fft_grav_task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:FFTGravitySolverTaskList
override	backup/task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:TimeIntegratorTaskList
override	backup/task_list.hpp	/^  void AddTask(const TaskID&, const TaskID& dep) override;$/;"	m	class:SuperTimeStepTaskList
override	backup/task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:SuperTimeStepTaskList
override	backup/task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:TimeIntegratorTaskList
override	fft_grav_task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:FFTGravitySolverTaskList
override	fft_grav_task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:FFTGravitySolverTaskList
override	task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:TimeIntegratorTaskList
override	task_list.hpp	/^  void AddTask(const TaskID&, const TaskID& dep) override;$/;"	m	class:SuperTimeStepTaskList
override	task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:SuperTimeStepTaskList
override	task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:TimeIntegratorTaskList
pmy_mgdriver_	backup/mg_task_list.hpp	/^  MultigridDriver* pmy_mgdriver_;$/;"	m	class:MultigridTaskList
pmy_mgdriver_	mg_task_list.hpp	/^  MultigridDriver* pmy_mgdriver_;$/;"	m	class:MultigridTaskList
ptlist_	backup/task_list.hpp	/^  TimeIntegratorTaskList *ptlist_;$/;"	m	class:SuperTimeStepTaskList
ptlist_	task_list.hpp	/^  TimeIntegratorTaskList *ptlist_;$/;"	m	class:SuperTimeStepTaskList
running	backup/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
running	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
stage_wghts	backup/task_list.hpp	/^  IntegratorWeight stage_wghts[MAX_NSTAGE];$/;"	m	class:TimeIntegratorTaskList
stage_wghts	task_list.hpp	/^  IntegratorWeight stage_wghts[MAX_NSTAGE];$/;"	m	class:TimeIntegratorTaskList
sts_max_dt_ratio	backup/task_list.hpp	/^  const Real sts_max_dt_ratio;$/;"	m	class:SuperTimeStepTaskList
sts_max_dt_ratio	task_list.hpp	/^  const Real sts_max_dt_ratio;$/;"	m	class:SuperTimeStepTaskList
stuck	backup/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
stuck	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
success	backup/task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
success	task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
task_id	backup/mg_task_list.hpp	/^  TaskID task_id;      \/\/ encodes task using bit positions in MultigridTaskNames$/;"	m	struct:MGTask
task_id	backup/task_list.hpp	/^  TaskID task_id;    \/\/ encodes task with bit positions in HydroIntegratorTaskNames$/;"	m	struct:Task
task_id	mg_task_list.hpp	/^  TaskID task_id;      \/\/ encodes task using bit positions in MultigridTaskNames$/;"	m	struct:MGTask
task_id	task_list.hpp	/^  TaskID task_id;    \/\/ encodes task with bit positions in HydroIntegratorTaskNames$/;"	m	struct:Task
task_list_	backup/mg_task_list.hpp	/^  MGTask task_list_[64];$/;"	m	class:MultigridTaskList
task_list_	backup/task_list.hpp	/^  Task task_list_[64*TaskID::kNField_];$/;"	m	class:TaskList
task_list_	mg_task_list.hpp	/^  MGTask task_list_[64];$/;"	m	class:MultigridTaskList
task_list_	task_list.hpp	/^  Task task_list_[64*TaskID::kNField_];$/;"	m	class:TaskList
