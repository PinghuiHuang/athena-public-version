!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddDustFluidsDiffusionFlux	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::AddDustFluidsDiffusionFlux(AthenaArray<Real> *flux_diff,$/;"	f	class:DustFluidsDiffusion
CalcDustFluidsDiffusionFlux	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::CalcDustFluidsDiffusionFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
ClearDustFluidsFlux	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::ClearDustFluidsFlux(AthenaArray<Real> *flux_diff) {$/;"	f	class:DustFluidsDiffusion
ConstDustDiffusivity	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::ConstDustDiffusivity(const AthenaArray<Real> &nu_gas,$/;"	f	class:DustFluidsDiffusion
ConstStoppingTime	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::ConstStoppingTime(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:DustFluidsDiffusion
DUSTFLUIDS_DIFFUSION_HPP_	dustfluids_diffusion.hpp	2;"	d
DustFluidsConcentrationDiffusiveFlux	concentration_diffusion.cpp	/^void DustFluidsDiffusion::DustFluidsConcentrationDiffusiveFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
DustFluidsDiffusion	dustfluids_diffusion.cpp	/^DustFluidsDiffusion::DustFluidsDiffusion(DustFluids *pdf, ParameterInput *pin) :$/;"	f	class:DustFluidsDiffusion
DustFluidsDiffusion	dustfluids_diffusion.hpp	/^class DustFluidsDiffusion {$/;"	c
DustFluidsMomentumDiffusiveFlux	momentum_diffusion.cpp	/^void DustFluidsDiffusion::DustFluidsMomentumDiffusiveFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
GetCylCoord	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::GetCylCoord(Coordinates *pco, Real &rad, Real &phi, Real &z, int i, int j, int k) {$/;"	f	class:DustFluidsDiffusion
Momentum_Diffusion_Flag_	dustfluids_diffusion.hpp	/^    bool Momentum_Diffusion_Flag_;  \/\/ true or false, the flag of momentum diffusion of the dust fluids due to concentration diffusion.$/;"	m	class:DustFluidsDiffusion
NewDiffusionDt	dustfluids_diffusion.cpp	/^Real DustFluidsDiffusion::NewDiffusionDt() {$/;"	f	class:DustFluidsDiffusion
User_Defined_DustDiffusivity	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::User_Defined_DustDiffusivity(const AthenaArray<Real> &nu_gas,$/;"	f	class:DustFluidsDiffusion
User_Defined_StoppingTime	dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::User_Defined_StoppingTime(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:DustFluidsDiffusion
Van_leer_limiter	momentum_diffusion.cpp	/^Real DustFluidsDiffusion::Van_leer_limiter(const Real a, const Real b){$/;"	f	class:DustFluidsDiffusion
diff_tot_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> diff_tot_;$/;"	m	class:DustFluidsDiffusion
dustfluids_diffusion_defined	dustfluids_diffusion.hpp	/^    bool dustfluids_diffusion_defined;$/;"	m	class:DustFluidsDiffusion
dustfluids_diffusion_flux	dustfluids_diffusion.hpp	/^    AthenaArray<Real> dustfluids_diffusion_flux[3];$/;"	m	class:DustFluidsDiffusion
dx1_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
dx2_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
dx3_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
eddy_timescale_r0	dustfluids_diffusion.hpp	/^    Real eddy_timescale_r0;         \/\/ The eddy timescale (turn over time of eddy) at r0$/;"	m	class:DustFluidsDiffusion
pco_	dustfluids_diffusion.hpp	/^    Coordinates *pco_;            \/\/ ptr to coordinates class$/;"	m	class:DustFluidsDiffusion
pmb_	dustfluids_diffusion.hpp	/^    MeshBlock   *pmb_;            \/\/ ptr to meshblock containing this DustFluidsDiffusion$/;"	m	class:DustFluidsDiffusion
pmy_dustfluids_	dustfluids_diffusion.hpp	/^    DustFluids  *pmy_dustfluids_; \/\/ ptr to DustFluids containing this DustFluidsDiffusion$/;"	m	class:DustFluidsDiffusion
r0_	dustfluids_diffusion.hpp	/^    Real r0_;                    \/\/ The length unit of radial direction in disk problem$/;"	m	class:DustFluidsDiffusion
true	dustfluids_diffusion.cpp	/^  dustfluids_diffusion_defined(true),$/;"	v
vol_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> vol_;$/;"	m	class:DustFluidsDiffusion
x1area_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x2area_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x2area_p1_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x3area_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x3area_p1_	dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
