!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddDiffusionFluxes	calculate_dustfluids_fluxes.cpp	/^void DustFluids::AddDiffusionFluxes() {$/;"	f	class:DustFluids
AddDustFluidsDiffusionFlux	diffusions/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::AddDustFluidsDiffusionFlux(AthenaArray<Real> *flux_diff,$/;"	f	class:DustFluidsDiffusion
AddDustFluidsFluxDivergence	add_dustfluids_flux_divergence.cpp	/^void DustFluids::AddDustFluidsFluxDivergence(const Real wght, AthenaArray<Real> &cons_df) {$/;"	f	class:DustFluids
AddDustFluidsSourceTerms	srcterms/dustfluids_srcterms.cpp	/^void DustFluidsSourceTerms::AddDustFluidsSourceTerms(const Real time, const Real dt,$/;"	f	class:DustFluidsSourceTerms
Aerodynamics_Drag	drags/dust_gas_drag.cpp	/^void DustGasDrag::Aerodynamics_Drag(MeshBlock *pmb, const Real dt, const AthenaArray<Real> &stopping_time,$/;"	f	class:DustGasDrag
CalcDustFluidsDiffusionFlux	diffusions/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::CalcDustFluidsDiffusionFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
CalculateDustFluidsFluxes	calculate_dustfluids_fluxes.cpp	/^void DustFluids::CalculateDustFluidsFluxes(const int order, AthenaArray<Real> &prim_df) {$/;"	f	class:DustFluids
CalculateDustFluidsFluxes_STS	calculate_dustfluids_fluxes.cpp	/^void DustFluids::CalculateDustFluidsFluxes_STS() {$/;"	f	class:DustFluids
ClearDustFluidsFlux	diffusions/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::ClearDustFluidsFlux(AthenaArray<Real> *flux_diff) {$/;"	f	class:DustFluidsDiffusion
ConstDustDiffusivity	diffusions/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::ConstDustDiffusivity(const AthenaArray<Real> &nu_gas,$/;"	f	class:DustFluidsDiffusion
ConstNu_Flag	diffusions/dustfluids_diffusion.hpp	/^    bool ConstNu_Flag;                \/\/ true or false, the flag of using the constant diffusivity of dust$/;"	m	class:DustFluidsDiffusion
ConstStoppingTime	dustfluids.cpp	/^void DustFluids::ConstStoppingTime(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:DustFluids
ConstStoppingTime_Flag	dustfluids.hpp	/^    bool ConstStoppingTime_Flag;           \/\/ true or false, the flag of using the constant stopping time of dust$/;"	m	class:DustFluids
DRAG_DUSTGAS_HPP_	drags/dust_gas_drag.hpp	2;"	d
DUSTFLUIDS_DIFFUSION_HPP_	diffusions/dustfluids_diffusion.hpp	2;"	d
DUSTFLUIDS_HPP_	dustfluids.hpp	2;"	d
DUSTFLUIDS_SRCTERMS_HPP_	srcterms/dustfluids_srcterms.hpp	2;"	d
Determinant	drags/LU_decompose.cpp	/^Real DustGasDrag::Determinant()$/;"	f	class:DustGasDrag
DustFeedback_Flag	drags/dust_gas_drag.hpp	/^    bool DustFeedback_Flag;           \/\/ true or false, the flag of dust feedback term$/;"	m	class:DustGasDrag
DustFluids	dustfluids.cpp	/^DustFluids::DustFluids(MeshBlock *pmb, ParameterInput *pin)  :$/;"	f	class:DustFluids
DustFluids	dustfluids.hpp	/^class DustFluids {$/;"	c
DustFluidsConcentrationDiffusiveFlux	diffusions/concentration_diffusion.cpp	/^void DustFluidsDiffusion::DustFluidsConcentrationDiffusiveFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
DustFluidsDiffusion	diffusions/dustfluids_diffusion.cpp	/^DustFluidsDiffusion::DustFluidsDiffusion(DustFluids *pdf, ParameterInput *pin) :$/;"	f	class:DustFluidsDiffusion
DustFluidsDiffusion	diffusions/dustfluids_diffusion.hpp	/^class DustFluidsDiffusion {$/;"	c
DustFluidsMomentumDiffusiveFlux	diffusions/momentum_diffusion.cpp	/^void DustFluidsDiffusion::DustFluidsMomentumDiffusiveFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
DustFluidsSourceTerms	srcterms/dustfluids_srcterms.cpp	/^DustFluidsSourceTerms::DustFluidsSourceTerms(DustFluids *pdf, ParameterInput *pin) {$/;"	f	class:DustFluidsSourceTerms
DustFluidsSourceTerms	srcterms/dustfluids_srcterms.hpp	/^class DustFluidsSourceTerms {$/;"	c
DustGasDrag	drags/dust_gas_drag.cpp	/^DustGasDrag::DustGasDrag(DustFluids *pdf, ParameterInput *pin) :$/;"	f	class:DustGasDrag
DustGasDrag	drags/dust_gas_drag.hpp	/^class DustGasDrag {$/;"	c
GetCylCoord	diffusions/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::GetCylCoord(Coordinates *pco, Real &rad, Real &phi, Real &z, int i, int j, int k) {$/;"	f	class:DustFluidsDiffusion
GetGM	srcterms/dustfluids_srcterms.hpp	/^    Real GetGM() const {return gm_;}$/;"	f	class:DustFluidsSourceTerms
HLLE_RiemannSolver_DustFluids	dustfluids_hlle_solver.cpp	/^void DustFluids::HLLE_RiemannSolver_DustFluids(const int k, const int j, const int il, const int iu,$/;"	f	class:DustFluids
InverseMatrix	drags/LU_decompose.cpp	/^AthenaArray<Real> DustGasDrag::InverseMatrix(AthenaArray<Real> &a_matrix)$/;"	f	class:DustGasDrag
IterativeImprove	drags/LU_decompose.cpp	/^void DustGasDrag::IterativeImprove(AthenaArray<Real> &b_vector, AthenaArray<Real> &x_vector)$/;"	f	class:DustGasDrag
LUdecompose	drags/LU_decompose.cpp	/^void DustGasDrag::LUdecompose(const AthenaArray<Real> &a_matrix)$/;"	f	class:DustGasDrag
Momentum_Diffusion_Flag	diffusions/dustfluids_diffusion.hpp	/^    bool Momentum_Diffusion_Flag;     \/\/ true or false, the flag of momentum diffusion of dust fluids due to concentration diffusion.$/;"	m	class:DustFluidsDiffusion
MultipleDust_Feedback	drags/solve_drags_matrix.cpp	/^void DustGasDrag::MultipleDust_Feedback(MeshBlock *pmb, const Real dt,$/;"	f	class:DustGasDrag
MultipleDust_NoFeedback	drags/solve_drags_matrix.cpp	/^void DustGasDrag::MultipleDust_NoFeedback(MeshBlock *pmb, const Real dt,$/;"	f	class:DustGasDrag
NDUSTFLUIDS	dustfluids.cpp	/^  particle_density_(NDUSTFLUIDS),    \/\/ normalized particle internal density, used in user defined stopping time$/;"	v
NewAdvectionDt	new_blockdt_dustfluids.cpp	/^Real DustFluids::NewAdvectionDt() {$/;"	f	class:DustFluids
NewDiffusionDt	diffusions/dustfluids_diffusion.cpp	/^Real DustFluidsDiffusion::NewDiffusionDt() {$/;"	f	class:DustFluidsDiffusion
NoCs_RiemannSolver_DustFluids	dustfluids_noCs_solver.cpp	/^void DustFluids::NoCs_RiemannSolver_DustFluids(const int k, const int j, const int il, const int iu,$/;"	f	class:DustFluids
Omega_0_	srcterms/dustfluids_srcterms.hpp	/^    Real Omega_0_, qshear_;       \/\/ Orbital freq and shear rate in shearing box$/;"	m	class:DustFluidsSourceTerms
PointMass_DustFluids	srcterms/pointmass_dustfluids.cpp	/^void DustFluidsSourceTerms::PointMass_DustFluids(const Real dt, const AthenaArray<Real> *flux_df,$/;"	f	class:DustFluidsSourceTerms
SetDustFluidsProperties	dustfluids.cpp	/^void DustFluids::SetDustFluidsProperties(){$/;"	f	class:DustFluids
ShBoxCoord_	srcterms/dustfluids_srcterms.hpp	/^    int  ShBoxCoord_;             \/\/ ShearCoordinate type: 1=xy (default), 2=xz$/;"	m	class:DustFluidsSourceTerms
ShearingBoxSourceTerms_DustFluids	srcterms/shearing_box_dustfluids.cpp	/^void DustFluidsSourceTerms::ShearingBoxSourceTerms_DustFluids(const Real dt,$/;"	f	class:DustFluidsSourceTerms
SingleDust_Feedback	drags/solve_drags_matrix.cpp	/^void DustGasDrag::SingleDust_Feedback(MeshBlock *pmb, const Real dt,$/;"	f	class:DustGasDrag
SingleDust_NoFeedback	drags/solve_drags_matrix.cpp	/^void DustGasDrag::SingleDust_NoFeedback(MeshBlock *pmb, const Real dt,$/;"	f	class:DustGasDrag
SolveLinearEquation	drags/LU_decompose.cpp	/^void DustGasDrag::SolveLinearEquation(AthenaArray<Real> &b_vector, AthenaArray<Real> &x_vector)$/;"	f	class:DustGasDrag
SolveMultipleLinearEquation	drags/LU_decompose.cpp	/^void DustGasDrag::SolveMultipleLinearEquation(AthenaArray<Real> &b_matrix, AthenaArray<Real> &x_matrix)$/;"	f	class:DustGasDrag
SoundSpeed_Flag	dustfluids.hpp	/^    bool SoundSpeed_Flag;                  \/\/ true or false, turn on the sound speed of dust fluids$/;"	m	class:DustFluids
UserDefined_DustDiffusivity	diffusions/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::UserDefined_DustDiffusivity(const AthenaArray<Real> &nu_gas,$/;"	f	class:DustFluidsDiffusion
UserDefined_StoppingTime	dustfluids.cpp	/^void DustFluids::UserDefined_StoppingTime(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:DustFluids
Van_leer_limiter	diffusions/momentum_diffusion.cpp	/^Real DustFluidsDiffusion::Van_leer_limiter(const Real a, const Real b){$/;"	f	class:DustFluidsDiffusion
aref_matrix	drags/dust_gas_drag.hpp	/^    AthenaArray<Real> aref_matrix;$/;"	m	class:DustGasDrag
cell_volume_	dustfluids.hpp	/^    AthenaArray<Real> cell_volume_;   \/\/ the volume of the cells$/;"	m	class:DustFluids
coarse_df_cons_	dustfluids.hpp	/^    AthenaArray<Real> coarse_df_cons_, coarse_df_prim_; \/\/ coarse df_cons and coarse df_prim, used in mesh refinement$/;"	m	class:DustFluids
coarse_df_prim_	dustfluids.hpp	/^    AthenaArray<Real> coarse_df_cons_, coarse_df_prim_; \/\/ coarse df_cons and coarse df_prim, used in mesh refinement$/;"	m	class:DustFluids
const_nu_dust_	dustfluids.hpp	/^    AthenaArray<Real> const_nu_dust_;       \/\/ Constant concentration diffusivity of dust$/;"	m	class:DustFluids
const_stopping_time_	dustfluids.hpp	/^    AthenaArray<Real> const_stopping_time_; \/\/ Constant stopping time$/;"	m	class:DustFluids
cs_dustfluids_array	dustfluids.hpp	/^    AthenaArray<Real> cs_dustfluids_array;      \/\/ Arrays of sound speed of dust, cs_d^2 = nu_d\/T_eddy$/;"	m	class:DustFluids
det	drags/dust_gas_drag.hpp	/^    Real det;                       \/\/ The determinant of the matrix of drags$/;"	m	class:DustGasDrag
df_cons	dustfluids.hpp	/^    AthenaArray<Real> df_cons, df_cons1, df_cons2;      \/\/ time-integrator memory register #1$/;"	m	class:DustFluids
df_cons1	dustfluids.hpp	/^    AthenaArray<Real> df_cons, df_cons1, df_cons2;      \/\/ time-integrator memory register #1$/;"	m	class:DustFluids
df_cons2	dustfluids.hpp	/^    AthenaArray<Real> df_cons, df_cons1, df_cons2;      \/\/ time-integrator memory register #1$/;"	m	class:DustFluids
df_cons_cc	dustfluids.hpp	/^    AthenaArray<Real> df_cons_cc, df_prim_cc;   \/\/ cell-centered approximations$/;"	m	class:DustFluids
df_flux	dustfluids.hpp	/^    AthenaArray<Real> df_flux[3];               \/\/ face-averaged flux vector$/;"	m	class:DustFluids
df_prim	dustfluids.hpp	/^    AthenaArray<Real> df_prim, df_prim1;        \/\/ time-integrator memory register #3$/;"	m	class:DustFluids
df_prim1	dustfluids.hpp	/^    AthenaArray<Real> df_prim, df_prim1;        \/\/ time-integrator memory register #3$/;"	m	class:DustFluids
df_prim_cc	dustfluids.hpp	/^    AthenaArray<Real> df_cons_cc, df_prim_cc;   \/\/ cell-centered approximations$/;"	m	class:DustFluids
df_prim_l3d_	dustfluids.hpp	/^    AthenaArray<Real> df_prim_l3d_, df_prim_r3d_;$/;"	m	class:DustFluids
df_prim_l_	dustfluids.hpp	/^    AthenaArray<Real> df_prim_l_, df_prim_r_, df_prim_lb_;  \/\/ left and right states in reconstruction$/;"	m	class:DustFluids
df_prim_lb_	dustfluids.hpp	/^    AthenaArray<Real> df_prim_l_, df_prim_r_, df_prim_lb_;  \/\/ left and right states in reconstruction$/;"	m	class:DustFluids
df_prim_r3d_	dustfluids.hpp	/^    AthenaArray<Real> df_prim_l3d_, df_prim_r3d_;$/;"	m	class:DustFluids
df_prim_r_	dustfluids.hpp	/^    AthenaArray<Real> df_prim_l_, df_prim_r_, df_prim_lb_;  \/\/ left and right states in reconstruction$/;"	m	class:DustFluids
dfbvar	dustfluids.hpp	/^    CellCenteredBoundaryVariable dfbvar;  \/\/ Cell-Centered variables$/;"	m	class:DustFluids
dfdif	dustfluids.hpp	/^    DustFluidsDiffusion          dfdif;   \/\/ Objects used in calculating the diffusions of dust$/;"	m	class:DustFluids
dfdrag	dustfluids.hpp	/^    DustGasDrag                  dfdrag;  \/\/ Objects used in calculating the dust-gas drags$/;"	m	class:DustFluids
dflx_	dustfluids.hpp	/^    AthenaArray<Real> dflx_;$/;"	m	class:DustFluids
dfsrc	dustfluids.cpp	/^  dfsrc(this,  pin) {$/;"	f
dfsrc	dustfluids.hpp	/^    DustFluidsSourceTerms        dfsrc;   \/\/ Objects used in calculating the source terms of dust$/;"	m	class:DustFluids
diff_tot_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> diff_tot_;$/;"	m	class:DustFluidsDiffusion
drags_matrix	drags/dust_gas_drag.hpp	/^    AthenaArray<Real> drags_matrix; \/\/ The matrix of drags between dust and gas$/;"	m	class:DustGasDrag
dt1_	dustfluids.hpp	/^    AthenaArray<Real> dt1_, dt2_, dt3_;                     \/\/ scratch arrays used in NewAdvectionDt$/;"	m	class:DustFluids
dt2_	dustfluids.hpp	/^    AthenaArray<Real> dt1_, dt2_, dt3_;                     \/\/ scratch arrays used in NewAdvectionDt$/;"	m	class:DustFluids
dt3_	dustfluids.hpp	/^    AthenaArray<Real> dt1_, dt2_, dt3_;                     \/\/ scratch arrays used in NewAdvectionDt$/;"	m	class:DustFluids
dustfluids_diffusion_defined	diffusions/dustfluids_diffusion.hpp	/^    bool dustfluids_diffusion_defined; \/\/ true or false$/;"	m	class:DustFluidsDiffusion
dustfluids_diffusion_flux	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> dustfluids_diffusion_flux[3];$/;"	m	class:DustFluidsDiffusion
dustfluids_sourceterms_defined	srcterms/dustfluids_srcterms.hpp	/^    bool dustfluids_sourceterms_defined;$/;"	m	class:DustFluidsSourceTerms
dx1_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
dx2_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
dx3_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
eddy_timescale_r0	diffusions/dustfluids_diffusion.hpp	/^    Real eddy_timescale_r0;      \/\/ The eddy timescale (turn over time of eddy) at r0$/;"	m	class:DustFluidsDiffusion
gm_	srcterms/dustfluids_srcterms.hpp	/^    Real gm_;                     \/\/ GM for point mass MUST BE LOCATED AT ORIGIN$/;"	m	class:DustFluidsSourceTerms
hydro_gamma_	drags/dust_gas_drag.hpp	/^    Real        hydro_gamma_;                \/\/ The adiabatic index of gas$/;"	m	class:DustGasDrag
indx_array	drags/dust_gas_drag.hpp	/^    AthenaArray<int>  indx_array;   \/\/ Stores the permutation.$/;"	m	class:DustGasDrag
laplacian_l_df_fc_	dustfluids.hpp	/^    AthenaArray<Real> laplacian_l_df_fc_, laplacian_r_df_fc_;$/;"	m	class:DustFluids
laplacian_r_df_fc_	dustfluids.hpp	/^    AthenaArray<Real> laplacian_l_df_fc_, laplacian_r_df_fc_;$/;"	m	class:DustFluids
lu_matrix	drags/dust_gas_drag.hpp	/^    AthenaArray<Real> lu_matrix;    \/\/ Stores the decomposition.$/;"	m	class:DustGasDrag
nu_dustfluids_array	dustfluids.hpp	/^    AthenaArray<Real> nu_dustfluids_array;      \/\/ Arrays of dust diffusivity array, nu_d$/;"	m	class:DustFluids
num_species	drags/dust_gas_drag.hpp	/^    const int num_species = NDUSTFLUIDS + 1; \/\/ gas and n dust fluids$/;"	m	class:DustGasDrag
particle_density_	dustfluids.hpp	/^    AthenaArray<Real> particle_density_;    \/\/ normalized dust particle internal density, used in user defined stopping time$/;"	m	class:DustFluids
pco_	diffusions/dustfluids_diffusion.hpp	/^    Coordinates *pco_;            \/\/ ptr to coordinates class$/;"	m	class:DustFluidsDiffusion
pco_	drags/dust_gas_drag.hpp	/^    Coordinates *pco_;                       \/\/ ptr to coordinates class$/;"	m	class:DustGasDrag
pco_	dustfluids.hpp	/^    Coordinates *pco_;            \/\/ ptr to coordinates class$/;"	m	class:DustFluids
pmb_	diffusions/dustfluids_diffusion.hpp	/^    MeshBlock   *pmb_;            \/\/ ptr to meshblock containing this DustFluidsDiffusion$/;"	m	class:DustFluidsDiffusion
pmb_	drags/dust_gas_drag.hpp	/^    MeshBlock   *pmb_;                       \/\/ ptr to meshblock containing this DustGasDrag$/;"	m	class:DustGasDrag
pmy_block	dustfluids.hpp	/^    MeshBlock* pmy_block;$/;"	m	class:DustFluids
pmy_dustfluids_	diffusions/dustfluids_diffusion.hpp	/^    DustFluids  *pmy_dustfluids_; \/\/ ptr to DustFluids containing this DustFluidsDiffusion$/;"	m	class:DustFluidsDiffusion
pmy_dustfluids_	drags/dust_gas_drag.hpp	/^    DustFluids  *pmy_dustfluids_;            \/\/ ptr to DustFluids containing this DustGasDrag$/;"	m	class:DustGasDrag
pmy_dustfluids_	srcterms/dustfluids_srcterms.hpp	/^    DustFluids *pmy_dustfluids_;  \/\/ ptr to DustFluids containing this DustFluidsSourceTerms$/;"	m	class:DustFluidsSourceTerms
qshear_	srcterms/dustfluids_srcterms.hpp	/^    Real Omega_0_, qshear_;       \/\/ Orbital freq and shear rate in shearing box$/;"	m	class:DustFluidsSourceTerms
r0_	diffusions/dustfluids_diffusion.hpp	/^    Real r0_;                    \/\/ The length unit of radial direction in disk problem$/;"	m	class:DustFluidsDiffusion
scale_vector	drags/dust_gas_drag.hpp	/^    AthenaArray<Real> scale_vector; \/\/ scale_vector stores the implicit scaling of each row$/;"	m	class:DustGasDrag
scr1_nkji_	dustfluids.hpp	/^    AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:DustFluids
scr2_nkji_	dustfluids.hpp	/^    AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:DustFluids
stopping_time_array	dustfluids.hpp	/^    AthenaArray<Real> stopping_time_array;      \/\/ Arrays of stopping time of dust$/;"	m	class:DustFluids
vol_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> vol_;$/;"	m	class:DustFluidsDiffusion
x1area_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x1face_area_	dustfluids.hpp	/^    AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_; \/\/ face area in x1, x2, x3 directions$/;"	m	class:DustFluids
x2area_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x2area_p1_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x2face_area_	dustfluids.hpp	/^    AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_; \/\/ face area in x1, x2, x3 directions$/;"	m	class:DustFluids
x2face_area_p1_	dustfluids.hpp	/^    AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:DustFluids
x3area_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x3area_p1_	diffusions/dustfluids_diffusion.hpp	/^    AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:DustFluidsDiffusion
x3face_area_	dustfluids.hpp	/^    AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_; \/\/ face area in x1, x2, x3 directions$/;"	m	class:DustFluids
x3face_area_p1_	dustfluids.hpp	/^    AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:DustFluids
