!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A0	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
A0	visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon34	file:
A1	cpaw.cpp	/^Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon45
A1	field_loop_poles.cpp	/^Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon24
A1	linear_wave.cpp	/^Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon10
A2	cpaw.cpp	/^Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon45
A2	field_loop_poles.cpp	/^Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon24
A2	linear_wave.cpp	/^Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon10
A3	cpaw.cpp	/^Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon45
A3	field_loop_poles.cpp	/^Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon24
A3	linear_wave.cpp	/^Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon10
B0	hb3.cpp	/^Real beta, B0;$/;"	m	namespace:__anon28	file:
Bump_flag	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
CalculateBeta	gr_torus.cpp	/^bool CalculateBeta(Real r_m, Real r_c, Real r_p, Real theta_m, Real theta_c,$/;"	f	namespace:__anon26
CalculateBetaFromA	gr_torus.cpp	/^bool CalculateBetaFromA(Real r_m, Real r_c, Real r_p,$/;"	f	namespace:__anon26
CalculateBetaMin	gr_torus.cpp	/^Real CalculateBetaMin() {$/;"	f	namespace:__anon26
CalculateFromTable	gr_mhd_inflow.cpp	/^void CalculateFromTable(Real r, Real theta, Real *prho, Real *put, Real *pur,$/;"	f	namespace:__anon8
CalculateLFromRPeak	gr_torus.cpp	/^Real CalculateLFromRPeak(Real r) {$/;"	f	namespace:__anon26
CalculateMagneticPressure	gr_torus.cpp	/^Real CalculateMagneticPressure(Real bb1, Real bb2, Real bb3, Real r, Real theta,$/;"	f	namespace:__anon26
CalculatePrimitives	gr_bondi.cpp	/^void CalculatePrimitives(Real r, Real temp_min, Real temp_max, Real *prho,$/;"	f	namespace:__anon6
CalculateRPeakFromL	gr_torus.cpp	/^Real CalculateRPeakFromL(Real l_target) {$/;"	f	namespace:__anon26
CalculateVelocityInTiltedTorus	gr_torus.cpp	/^void CalculateVelocityInTiltedTorus(Real r, Real theta, Real phi, Real *pu0,$/;"	f	namespace:__anon26
CalculateVelocityInTorus	gr_torus.cpp	/^void CalculateVelocityInTorus(Real r, Real sin_theta, Real *pu0, Real *pu3) {$/;"	f	namespace:__anon26
CubicRootReal	gr_linear_wave.cpp	/^Real CubicRootReal(Real a2, Real a1, Real a0) {$/;"	f	namespace:__anon36
DMRInnerX1	dmr.cpp	/^void DMRInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DMRInnerX2	dmr.cpp	/^void DMRInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DMROuterX2	dmr.cpp	/^void DMROuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DenProfileCyl	disk.cpp	/^Real DenProfileCyl(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon21
DenProfileCyl_Gaussian	disk.cpp	/^Real DenProfileCyl_Gaussian(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon21
Density_interpolate	disk.cpp	/^void Density_interpolate(const Real r_active, const Real r_ghost, const Real rho_active,$/;"	f	namespace:__anon21
DistanceBetweenPoints	gr_blast.cpp	/^Real DistanceBetweenPoints(Real x1, Real x2, Real x3, Real y1, Real y2, Real y3) {$/;"	f	namespace:__anon31
DustFluidsDyeEntropy	kh.cpp	/^Real DustFluidsDyeEntropy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon33
Eigensystem	linear_wave.cpp	/^void Eigensystem(const Real d, const Real v1, const Real v2, const Real v3,$/;"	f	namespace:__anon10
FinalCosineProfile	mignone_advection.cpp	/^Real FinalCosineProfile(Real x2) {$/;"	f	namespace:__anon43
FinalCosineSphericalIntegrand	mignone_advection.cpp	/^Real FinalCosineSphericalIntegrand(Real x2) {$/;"	f	namespace:__anon43
FinalGaussianCylindricalIntegrand	mignone_advection.cpp	/^Real FinalGaussianCylindricalIntegrand(Real x1) {$/;"	f	namespace:__anon43
FinalGaussianProfile	mignone_advection.cpp	/^Real FinalGaussianProfile(Real x1) {$/;"	f	namespace:__anon43
FinalGaussianSphericalIntegrand	mignone_advection.cpp	/^Real FinalGaussianSphericalIntegrand(Real x1) {$/;"	f	namespace:__anon43
FixedBoundary	gr_bondi.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
FixedBoundary	gr_geodesic_infall.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
FixedBoundary	gr_mhd_inflow.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
FixedBoundary	gr_torus.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
GetBoyerLindquistCoordinates	gr_bondi.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	namespace:__anon6
GetBoyerLindquistCoordinates	gr_geodesic_infall.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	namespace:__anon14
GetBoyerLindquistCoordinates	gr_mhd_inflow.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	namespace:__anon8
GetBoyerLindquistCoordinates	gr_torus.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	namespace:__anon26
GetCylCoord	disk.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon21
GetMinkowskiCoordinates	gr_blast.cpp	/^void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	namespace:__anon31
GetMinkowskiCoordinates	gr_linear_wave.cpp	/^void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	namespace:__anon36
GetMinkowskiCoordinates	gr_shock_tube.cpp	/^void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	namespace:__anon38
HistoryBxBy	hb3.cpp	/^Real HistoryBxBy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon29
HistoryBxBy	hgb.cpp	/^Real HistoryBxBy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon4
HistoryBxBy	strat.cpp	/^Real HistoryBxBy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon2
HistorydBy	hgb.cpp	/^Real HistorydBy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon4
HistorydVxVy	hgb.cpp	/^Real HistorydVxVy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon4
HistorydVxVy	strat.cpp	/^Real HistorydVxVy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon2
InflowBoundary	gr_torus.cpp	/^void InflowBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
InitUserMeshBlockData	default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshBlockData	gr_torus.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshBlockData	linear_wave.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshData	blast.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	collision_multipledust.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	cpaw.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	default_pgen.cpp	/^void __attribute__((weak)) Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	disk.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	dmr.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	field_loop_poles.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	from_array.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	gr_bondi.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	gr_geodesic_infall.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	gr_linear_wave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	gr_mhd_inflow.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	gr_torus.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	hb3.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	hgb.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	jeans.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	jet.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	kh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	linear_wave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	magnoh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	mignone_advection.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	noh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	poisson.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	rt.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	shk_cloud.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	slotted_cylinder.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	ssheet.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	strat.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	turb.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	visc.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	visc_dustfluids.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitialCosineProfile	mignone_advection.cpp	/^Real InitialCosineProfile(Real x2) {$/;"	f	namespace:__anon43
InitialCosineSphericalIntegrand	mignone_advection.cpp	/^Real InitialCosineSphericalIntegrand(Real x2) {$/;"	f	namespace:__anon43
InitialGaussianCylindricalIntegrand	mignone_advection.cpp	/^Real InitialGaussianCylindricalIntegrand(Real x1) {$/;"	f	namespace:__anon43
InitialGaussianProfile	mignone_advection.cpp	/^Real InitialGaussianProfile(Real x1) {$/;"	f	namespace:__anon43
InitialGaussianSphericalIntegrand	mignone_advection.cpp	/^Real InitialGaussianSphericalIntegrand(Real x1) {$/;"	f	namespace:__anon43
InnerX1_Average	disk.cpp	/^void InnerX1_Average(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
InnerX1_Fixed	disk.cpp	/^void InnerX1_Fixed(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
InnerX1_Linear	disk.cpp	/^void InnerX1_Linear(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
InnerX1_NoMatterInput	disk.cpp	/^void InnerX1_NoMatterInput(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
InnerX1_Powerlaw	disk.cpp	/^void InnerX1_Powerlaw(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
IntegrandFinal	mignone_advection.cpp	/^Real (*IntegrandFinal)(Real x1);$/;"	m	namespace:__anon42	file:
IntegrandInitial	mignone_advection.cpp	/^Real (*IntegrandInitial)(Real x1);$/;"	m	namespace:__anon42	file:
JetInnerX1	jet.cpp	/^void JetInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
Keplerian_interpolate	disk.cpp	/^void Keplerian_interpolate(const Real r_active, const Real r_ghost, const Real vphi_active,$/;"	f	namespace:__anon21
Linear_interpolate	disk.cpp	/^void Linear_interpolate(const Real x0, const Real x1, const Real y0, const Real y1,$/;"	f	namespace:__anon21
LogHAux	gr_torus.cpp	/^Real LogHAux(Real r, Real sin_theta) {$/;"	f	namespace:__anon26
LoopInnerX1	field_loop_poles.cpp	/^void LoopInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
LoopInnerX2	field_loop_poles.cpp	/^void LoopInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
LoopOuterX1	field_loop_poles.cpp	/^void LoopOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
LoopOuterX2	field_loop_poles.cpp	/^void LoopOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
Lx	hgb.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon3	file:
Ly	hgb.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon3	file:
Lz	hgb.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon3	file:
MagneticFieldConfigs	gr_torus.cpp	/^enum class MagneticFieldConfigs {vertical, normal, renorm};$/;"	c	file:
MaxV2	linear_wave.cpp	/^Real MaxV2(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon10
MySource	disk.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon21
MyTimeStep	collision_multipledust.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon17
N_gl	mignone_advection.cpp	/^constexpr int N_gl = 12;$/;"	m	namespace:__anon42	file:
N_gl	slotted_cylinder.cpp	/^constexpr int N_gl = 12;$/;"	m	namespace:__anon40	file:
Noh3DOuterX1	noh.cpp	/^void Noh3DOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
Noh3DOuterX2	noh.cpp	/^void Noh3DOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
Noh3DOuterX3	noh.cpp	/^void Noh3DOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
Omega_0	hb3.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon28	file:
Omega_0	hgb.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon3	file:
Omega_0	ssheet.cpp	/^Real Omega_0,qshear;$/;"	m	namespace:__anon46	file:
Omega_0	strat.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon1	file:
OuterX1_Average	disk.cpp	/^void OuterX1_Average(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
OuterX1_Fixed	disk.cpp	/^void OuterX1_Fixed(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
OuterX1_Linear	disk.cpp	/^void OuterX1_Linear(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
OuterX1_NoMatterInput	disk.cpp	/^void OuterX1_NoMatterInput(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
OuterX1_Powerlaw	disk.cpp	/^void OuterX1_Powerlaw(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
P0	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
PoverR	disk.cpp	/^Real PoverR(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon21
ProblemGenerator	blast.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	collision_multipledust.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	cpaw.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	disk.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	dmr.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	eos_test.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	fft.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	field_loop.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	field_loop_poles.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	from_array.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	gr_blast.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	gr_bondi.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	gr_geodesic_infall.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	gr_linear_wave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	gr_mhd_inflow.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	gr_shock_tube.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	gr_torus.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	hb3.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	hgb.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	jeans.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	jet.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	kh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	linear_wave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	lw_implode.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	magnoh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	mignone_advection.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	noh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	orszag_tang.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	poisson.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	resist.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	rotor.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	rt.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	shk_cloud.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	shock_tube.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	shu_osher.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	slotted_cylinder.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	ssheet.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	strat.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	turb.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	twoibw.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	visc.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	visc_dustfluids.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProjectPressureInnerX2	rt.cpp	/^void ProjectPressureInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
ProjectPressureInnerX3	rt.cpp	/^void ProjectPressureInnerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
ProjectPressureOuterX2	rt.cpp	/^void ProjectPressureOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
ProjectPressureOuterX3	rt.cpp	/^void ProjectPressureOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
QuadraticRoot	gr_linear_wave.cpp	/^Real QuadraticRoot(Real a1, Real a0, bool greater_root) {$/;"	f	namespace:__anon36
QuarticRoots	gr_linear_wave.cpp	/^void QuarticRoots(Real a3, Real a2, Real a1, Real a0, Real *px1, Real *px2,$/;"	f	namespace:__anon36
RadialD2G	disk.cpp	/^Real RadialD2G(const Real rad, const Real initial_dust2gas, const Real slope)$/;"	f	namespace:__anon21
RefinementCondition	blast.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	dmr.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	field_loop_poles.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	kh.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	linear_wave.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	rt.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	slotted_cylinder.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
ShBoxCoord	hb3.cpp	/^int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	m	namespace:__anon28	file:
ShockCloudInnerX1	shk_cloud.cpp	/^void ShockCloudInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
SlottedCylinderProfile	slotted_cylinder.cpp	/^Real SlottedCylinderProfile(Real x1, Real x2) {$/;"	f	namespace:__anon41
StratOutflowInnerX3	strat.cpp	/^void StratOutflowInnerX3(MeshBlock *pmb, Coordinates *pco,$/;"	f
StratOutflowOuterX3	strat.cpp	/^void StratOutflowOuterX3(MeshBlock *pmb, Coordinates *pco,$/;"	f
TemperatureBisect	gr_bondi.cpp	/^Real TemperatureBisect(Real r, Real t_min, Real t_max) {$/;"	f	namespace:__anon6
TemperatureMin	gr_bondi.cpp	/^Real TemperatureMin(Real r, Real t_min, Real t_max) {$/;"	f	namespace:__anon6
TemperatureResidual	gr_bondi.cpp	/^Real TemperatureResidual(Real t, Real r) {$/;"	f	namespace:__anon6
TransformVector	gr_blast.cpp	/^void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	namespace:__anon31
TransformVector	gr_bondi.cpp	/^void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	namespace:__anon6
TransformVector	gr_linear_wave.cpp	/^void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	namespace:__anon36
TransformVector	gr_mhd_inflow.cpp	/^void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	namespace:__anon8
TransformVector	gr_shock_tube.cpp	/^void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	namespace:__anon38
TransformVector	gr_torus.cpp	/^void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	namespace:__anon26
UserWorkAfterLoop	blast.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	cpaw.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	default_pgen.cpp	/^void __attribute__((weak)) Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	eos_test.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	fft.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	gr_linear_wave.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	jeans.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	linear_wave.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	mignone_advection.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	poisson.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	shock_tube.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	slotted_cylinder.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	strat.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	turb.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkBeforeOutput	default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkBeforeOutput	linear_wave.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkBeforeOutput	strat.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkInLoop	default_pgen.cpp	/^void __attribute__((weak)) Mesh::UserWorkInLoop() {$/;"	f	class:Mesh
UserWorkInLoop	default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	disk.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	gr_torus.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	hb3.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	poisson.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	ssheet.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	strat.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
VelProfileCyl	disk.cpp	/^void VelProfileCyl(const Real rad, const Real phi, const Real z,$/;"	f	namespace:__anon21
VelProfileCyl	field_loop_poles.cpp	/^void VelProfileCyl(const Real x1, const Real x2, const Real x3,$/;"	f	namespace:__anon24
VelProfileCyl_DustFluids	disk.cpp	/^void VelProfileCyl_DustFluids(const Real rad, const Real phi, const Real z,$/;"	f	namespace:__anon21
VertGrav	strat.cpp	/^void VertGrav(MeshBlock *pmb, const Real time, const Real dt,$/;"	f
Vr_interpolate_inner	disk.cpp	/^void Vr_interpolate_inner(const Real r_active, const Real r_ghost, const Real vr_active,$/;"	f	namespace:__anon21
Vr_interpolate_inner_2	disk.cpp	/^void Vr_interpolate_inner_2(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon21
Vr_interpolate_outer	disk.cpp	/^void Vr_interpolate_outer(const Real r_active, const Real r_ghost, const Real vr_active,$/;"	f	namespace:__anon21
Vr_interpolate_outer_2	disk.cpp	/^void Vr_interpolate_outer_2(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon21
a	gr_bondi.cpp	/^Real m, a;          \/\/ black hole mass and spin$/;"	m	namespace:__anon5	file:
a	gr_mhd_inflow.cpp	/^Real a;                           \/\/ spin of black hole (0 <= a < M)$/;"	m	namespace:__anon7	file:
a	gr_torus.cpp	/^Real m, a;                                  \/\/ black hole parameters$/;"	m	namespace:__anon25	file:
a_width	mignone_advection.cpp	/^Real a_width, b_center, alpha;$/;"	m	namespace:__anon42	file:
alpha	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
alpha	mignone_advection.cpp	/^Real a_width, b_center, alpha;$/;"	m	namespace:__anon42	file:
amp	gr_linear_wave.cpp	/^Real amp;                     \/\/ amplitude of wave$/;"	m	namespace:__anon35	file:
amp	hb3.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon28	file:
amp	jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon22	file:
amp	linear_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon9	file:
amp	ssheet.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon46	file:
ang_2	cpaw.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon44	file:
ang_2	jeans.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon22	file:
ang_2	linear_wave.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon9	file:
ang_2_vert	linear_wave.cpp	/^bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	m	namespace:__anon9	file:
ang_3	cpaw.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon44	file:
ang_3	jeans.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon22	file:
ang_3	linear_wave.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon9	file:
ang_3_vert	linear_wave.cpp	/^bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	m	namespace:__anon9	file:
b	gr_linear_wave.cpp	/^Real u[4], b[4];              \/\/ contravariant quantities$/;"	m	namespace:__anon35	file:
b0	field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon23	file:
b0	jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon22	file:
b_center	mignone_advection.cpp	/^Real a_width, b_center, alpha;$/;"	m	namespace:__anon42	file:
b_par	cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon44	file:
b_perp	cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon44	file:
bcc	gr_linear_wave.cpp	/^AthenaArray<Real> bcc;        \/\/ cell-centered initial magnetic fields$/;"	v
beta	field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon23	file:
beta	hb3.cpp	/^Real beta, B0;$/;"	m	namespace:__anon28	file:
beta	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
beta_min	gr_torus.cpp	/^Real beta_min;                              \/\/ min ratio of gas to mag pressure$/;"	m	namespace:__anon25	file:
bphi0	magnoh.cpp	/^Real bphi0, bz;$/;"	m	namespace:__anon19	file:
bsq_over_rho	gr_bondi.cpp	/^Real bsq_over_rho;  \/\/ b^2\/rho at inner radius$/;"	m	namespace:__anon5	file:
bx	gr_linear_wave.cpp	/^Real bx;                      \/\/ longitudinal magnetic field$/;"	m	namespace:__anon35	file:
bx0	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
bx_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
bx_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
bxl	shk_cloud.cpp	/^Real bxl, byl, bzl;$/;"	m	namespace:__anon27	file:
by0	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
by_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
by_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
byl	shk_cloud.cpp	/^Real bxl, byl, bzl;$/;"	m	namespace:__anon27	file:
bz	magnoh.cpp	/^Real bphi0, bz;$/;"	m	namespace:__anon19	file:
bz0	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
bz_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
bz_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
bzl	shk_cloud.cpp	/^Real bxl, byl, bzl;$/;"	m	namespace:__anon27	file:
c1	gr_bondi.cpp	/^Real c1, c2;        \/\/ useful constants$/;"	m	namespace:__anon5	file:
c2	gr_bondi.cpp	/^Real c1, c2;        \/\/ useful constants$/;"	m	namespace:__anon5	file:
cen1	visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon34	file:
cen2	visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon34	file:
center_x1	slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon40	file:
center_x2	slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon40	file:
compute_error	gr_linear_wave.cpp	/^bool compute_error;           \/\/ flag indicating L1 errors should be computed and saved$/;"	m	namespace:__anon35	file:
cooling	disk.cpp	/^void cooling(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon21
corotate	disk.cpp	/^void corotate(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon21
cos_a2	cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon44	file:
cos_a2	jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon22	file:
cos_a2	linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon9	file:
cos_a3	cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon44	file:
cos_a3	jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon22	file:
cos_a3	linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon9	file:
cos_psi	gr_torus.cpp	/^Real psi, sin_psi, cos_psi;                 \/\/ tilt parameters$/;"	m	namespace:__anon25	file:
cs2	jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon22	file:
d0	jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon22	file:
d0	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
d0	mignone_advection.cpp	/^constexpr Real d0 = 1.0;$/;"	m	namespace:__anon42	file:
d0	slotted_cylinder.cpp	/^constexpr Real d0 = 1.0;$/;"	m	namespace:__anon40	file:
d_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
d_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
dby	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
dbz	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
delta_b	gr_linear_wave.cpp	/^Real delta_u[4], delta_b[4];  \/\/ perturbations to contravariant quantities$/;"	m	namespace:__anon35	file:
delta_pgas	gr_linear_wave.cpp	/^Real delta_rho, delta_pgas;   \/\/ perturbations to thermodynamic quantities$/;"	m	namespace:__anon35	file:
delta_rho	gr_linear_wave.cpp	/^Real delta_rho, delta_pgas;   \/\/ perturbations to thermodynamic quantities$/;"	m	namespace:__anon35	file:
delta_u	gr_linear_wave.cpp	/^Real delta_u[4], delta_b[4];  \/\/ perturbations to contravariant quantities$/;"	m	namespace:__anon35	file:
delta_v	gr_linear_wave.cpp	/^Real delta_v[4];              \/\/ perturbations to 3-velocity$/;"	m	namespace:__anon35	file:
den	cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon44	file:
dfloor	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
dfloor	strat.cpp	/^Real dfloor, pfloor;$/;"	m	namespace:__anon1	file:
dl	shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon27	file:
dslope	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
dust_dens_slope	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
dwidth	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
ev	linear_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon9	file:
fac	cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon44	file:
field_config	gr_torus.cpp	/^MagneticFieldConfigs field_config;                     \/\/ type of magnetic field$/;"	m	namespace:__anon25	file:
gam	jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon22	file:
gam	linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon9	file:
gamma_adi	gr_torus.cpp	/^Real gamma_adi, k_adi;                      \/\/ hydro parameters$/;"	m	namespace:__anon25	file:
gamma_adi_red	gr_linear_wave.cpp	/^Real gamma_adi_red;           \/\/ reduced adiabatic index \\Gamma\/(\\Gamma-1)$/;"	m	namespace:__anon35	file:
gamma_gas	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
gamma_gas	field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon23	file:
gconst	jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon22	file:
gm0	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
gm0	visc.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon15	file:
gm0	visc_dustfluids.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon34	file:
gm1	cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon44	file:
gm1	hb3.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon28	file:
gm1	jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon22	file:
gm1	jet.cpp	/^Real gm1, x2_0, x3_0;$/;"	m	namespace:__anon18	file:
gm1	linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon9	file:
gm1	magnoh.cpp	/^Real gm1;$/;"	m	namespace:__anon19	file:
gm1	ssheet.cpp	/^Real gm1,iso_cs;$/;"	m	namespace:__anon46	file:
gmma	noh.cpp	/^Real gmma, gmma1;$/;"	m	namespace:__anon39	file:
gmma1	noh.cpp	/^Real gmma, gmma1;$/;"	m	namespace:__anon39	file:
gmma1	shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon27	file:
gmp	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
grav_acc	rt.cpp	/^Real grav_acc;$/;"	m	namespace:__anon12	file:
ifield	hb3.cpp	/^int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	m	namespace:__anon28	file:
initial	gr_linear_wave.cpp	/^AthenaArray<Real> initial;    \/\/ initial conditions$/;"	v
initial_D2G	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
inner_dampingzone_1	disk.cpp	/^Real inner_dampingzone_1, outer_dampingzone_1, inner_dampingzone_2, outer_dampingzone_2, width_dampingzone;$/;"	m	namespace:__anon20	file:
inner_dampingzone_2	disk.cpp	/^Real inner_dampingzone_1, outer_dampingzone_1, inner_dampingzone_2, outer_dampingzone_2, width_dampingzone;$/;"	m	namespace:__anon20	file:
interp_values	gr_mhd_inflow.cpp	/^AthenaArray<Real> interp_values;  \/\/ table for analytic solution$/;"	m	namespace:__anon7	file:
ipert	hb3.cpp	/^int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	m	namespace:__anon28	file:
ipert	ssheet.cpp	/^int ipert; \/\/ initial pattern$/;"	m	namespace:__anon46	file:
iprob	kh.cpp	/^int iprob;$/;"	m	namespace:__anon32	file:
iprob	mignone_advection.cpp	/^int iprob;$/;"	m	namespace:__anon42	file:
iprob	visc.cpp	/^int iprob;$/;"	m	namespace:__anon15	file:
iprob	visc_dustfluids.cpp	/^int iprob;$/;"	m	namespace:__anon34	file:
iso_cs	hb3.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon28	file:
iso_cs	linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon9	file:
iso_cs	mignone_advection.cpp	/^Real iso_cs;$/;"	m	namespace:__anon42	file:
iso_cs	slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon40	file:
iso_cs	ssheet.cpp	/^Real gm1,iso_cs;$/;"	m	namespace:__anon46	file:
isocs2	field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon23	file:
k_adi	gr_bondi.cpp	/^Real n_adi, k_adi;  \/\/ hydro parameters$/;"	m	namespace:__anon5	file:
k_adi	gr_torus.cpp	/^Real gamma_adi, k_adi;                      \/\/ hydro parameters$/;"	m	namespace:__anon25	file:
k_par	cpaw.cpp	/^Real lambda, k_par; \/\/ Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon44	file:
k_par	linear_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon9	file:
kwave	jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon22	file:
l	gr_torus.cpp	/^Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	m	namespace:__anon25	file:
lambda	cpaw.cpp	/^Real lambda, k_par; \/\/ Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon44	file:
lambda	gr_linear_wave.cpp	/^Real lambda;                  \/\/ wavespeed$/;"	m	namespace:__anon35	file:
lambda	jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon22	file:
lambda	linear_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon9	file:
lem	linear_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon9	file:
log_h_edge	gr_torus.cpp	/^Real log_h_edge, log_h_peak;                \/\/ calculated torus parameters$/;"	m	namespace:__anon25	file:
log_h_peak	gr_torus.cpp	/^Real log_h_edge, log_h_peak;                \/\/ calculated torus parameters$/;"	m	namespace:__anon25	file:
m	gr_bondi.cpp	/^Real m, a;          \/\/ black hole mass and spin$/;"	m	namespace:__anon5	file:
m	gr_mhd_inflow.cpp	/^Real m;                           \/\/ mass M of black hole$/;"	m	namespace:__anon7	file:
m	gr_torus.cpp	/^Real m, a;                                  \/\/ black hole parameters$/;"	m	namespace:__anon25	file:
m_coord	mignone_advection.cpp	/^int m_coord;$/;"	m	namespace:__anon42	file:
mphi	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
n_adi	gr_bondi.cpp	/^Real n_adi, k_adi;  \/\/ hydro parameters$/;"	m	namespace:__anon5	file:
njeans	jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon22	file:
normal	gr_torus.cpp	/^enum class MagneticFieldConfigs {vertical, normal, renorm};$/;"	m	class:MagneticFieldConfigs	file:
nuiso	visc.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon15	file:
nuiso	visc_dustfluids.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon34	file:
num_lines	gr_mhd_inflow.cpp	/^int num_lines;                    \/\/ number of lines in table$/;"	m	namespace:__anon7	file:
nwx	hb3.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon28	file:
nwx	ssheet.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon46	file:
nwy	hb3.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon28	file:
nwy	ssheet.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon46	file:
omega	jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon22	file:
omega	slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon40	file:
omega2	jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon22	file:
omega_p	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
omega_x1	slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon40	file:
omega_x2	slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon40	file:
outer_dampingzone_1	disk.cpp	/^Real inner_dampingzone_1, outer_dampingzone_1, inner_dampingzone_2, outer_dampingzone_2, width_dampingzone;$/;"	m	namespace:__anon20	file:
outer_dampingzone_2	disk.cpp	/^Real inner_dampingzone_1, outer_dampingzone_1, inner_dampingzone_2, outer_dampingzone_2, width_dampingzone;$/;"	m	namespace:__anon20	file:
p0	jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon22	file:
p0	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
p0_over_r0	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
p_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
p_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
pcoeff	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
pert_amp	gr_torus.cpp	/^Real pert_amp, pert_kr, pert_kz;            \/\/ parameters for initial perturbations$/;"	m	namespace:__anon25	file:
pert_kr	gr_torus.cpp	/^Real pert_amp, pert_kr, pert_kz;            \/\/ parameters for initial perturbations$/;"	m	namespace:__anon25	file:
pert_kz	gr_torus.cpp	/^Real pert_amp, pert_kr, pert_kz;            \/\/ parameters for initial perturbations$/;"	m	namespace:__anon25	file:
perturb	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
pfloor	strat.cpp	/^Real dfloor, pfloor;$/;"	m	namespace:__anon1	file:
pgas	gr_linear_wave.cpp	/^Real rho, pgas;               \/\/ thermodynamic quantities$/;"	m	namespace:__anon35	file:
pgas_min	gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	m	namespace:__anon25	file:
pgas_over_rho_peak	gr_torus.cpp	/^Real pgas_over_rho_peak, rho_peak;          \/\/ more calculated torus parameters$/;"	m	namespace:__anon25	file:
pgas_pow	gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	m	namespace:__anon25	file:
phi_max	gr_torus.cpp	/^Real phi_min, phi_max;                      \/\/ limits in phi for 3D samples$/;"	m	namespace:__anon25	file:
phi_min	gr_torus.cpp	/^Real phi_min, phi_max;                      \/\/ limits in phi for 3D samples$/;"	m	namespace:__anon25	file:
phi_planet	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
pl	shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon27	file:
potential_cutoff	gr_torus.cpp	/^Real potential_cutoff;                      \/\/ sets region of torus to magnetize$/;"	m	namespace:__anon25	file:
potential_r_pow	gr_torus.cpp	/^Real potential_r_pow, potential_rho_pow;    \/\/ set how vector potential scales$/;"	m	namespace:__anon25	file:
potential_rho_pow	gr_torus.cpp	/^Real potential_r_pow, potential_rho_pow;    \/\/ set how vector potential scales$/;"	m	namespace:__anon25	file:
potentialwell	disk.cpp	/^void potentialwell(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon21
pres	cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon44	file:
press	shock_tube.cpp	/^Real press(Real rho, Real T) {$/;"	f
psi	gr_torus.cpp	/^Real psi, sin_psi, cos_psi;                 \/\/ tilt parameters$/;"	m	namespace:__anon25	file:
pslope	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
qshear	hb3.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon28	file:
qshear	hgb.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon3	file:
qshear	ssheet.cpp	/^Real Omega_0,qshear;$/;"	m	namespace:__anon46	file:
qshear	strat.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon1	file:
r0	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
r_crit	gr_bondi.cpp	/^Real r_crit;        \/\/ sonic point radius$/;"	m	namespace:__anon5	file:
r_edge	gr_torus.cpp	/^Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	m	namespace:__anon25	file:
r_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
r_max	gr_torus.cpp	/^Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	m	namespace:__anon25	file:
r_min	gr_torus.cpp	/^Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	m	namespace:__anon25	file:
r_peak	gr_torus.cpp	/^Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	m	namespace:__anon25	file:
rad_planet	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
radius	slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon40	file:
rand_amp	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
rem	linear_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon9	file:
rho	gr_linear_wave.cpp	/^Real rho, pgas;               \/\/ thermodynamic quantities$/;"	m	namespace:__anon35	file:
rho0	disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, initial_D2G, dfloor;$/;"	m	namespace:__anon20	file:
rho0	field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon23	file:
rho0	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
rho_max	gr_torus.cpp	/^Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	m	namespace:__anon25	file:
rho_min	gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	m	namespace:__anon25	file:
rho_peak	gr_torus.cpp	/^Real pgas_over_rho_peak, rho_peak;          \/\/ more calculated torus parameters$/;"	m	namespace:__anon25	file:
rho_pow	gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	m	namespace:__anon25	file:
rn	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
rs	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
rseed	turb.cpp	/^std::int64_t rseed; \/\/ seed for turbulence power spectrum$/;"	v
s_height	slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon40	file:
s_width	slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon40	file:
sample_cutoff	gr_torus.cpp	/^Real sample_cutoff;                         \/\/ density cutoff for sample grid$/;"	m	namespace:__anon25	file:
sample_n_phi	gr_torus.cpp	/^int sample_n_phi;                           \/\/ number of cells in 3D sample grid$/;"	m	namespace:__anon25	file:
sample_n_r	gr_torus.cpp	/^int sample_n_r, sample_n_theta;             \/\/ number of cells in 2D sample grid$/;"	m	namespace:__anon25	file:
sample_n_theta	gr_torus.cpp	/^int sample_n_r, sample_n_theta;             \/\/ number of cells in 2D sample grid$/;"	m	namespace:__anon25	file:
sample_r_rat	gr_torus.cpp	/^Real sample_r_rat;                          \/\/ sample grid geometric spacing ratio$/;"	m	namespace:__anon25	file:
shboxcoord	ssheet.cpp	/^int shboxcoord;$/;"	m	namespace:__anon46	file:
sig_x1	visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon34	file:
sig_x2	visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon34	file:
sin_a2	cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon44	file:
sin_a2	jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon22	file:
sin_a2	linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon9	file:
sin_a3	cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon44	file:
sin_a3	jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon22	file:
sin_a3	linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon9	file:
sin_psi	gr_torus.cpp	/^Real psi, sin_psi, cos_psi;                 \/\/ tilt parameters$/;"	m	namespace:__anon25	file:
t0	collision_multipledust.cpp	/^Real v0, t0, x0, user_dt;$/;"	m	namespace:__anon16	file:
t0	resist.cpp	/^Real x0, t0;$/;"	m	namespace:__anon11	file:
t0	visc.cpp	/^Real v0, t0;$/;"	m	namespace:__anon15	file:
t0	visc_dustfluids.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon34	file:
t0pot	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
t_final	mignone_advection.cpp	/^Real t_final;$/;"	m	namespace:__anon42	file:
tau_relax	disk.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon20	file:
temperature	gr_mhd_inflow.cpp	/^Real temperature;                 \/\/ temperature pgas\/rho$/;"	m	namespace:__anon7	file:
theta_max	gr_torus.cpp	/^Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	m	namespace:__anon25	file:
theta_min	gr_torus.cpp	/^Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	m	namespace:__anon25	file:
threshold	blast.cpp	/^Real threshold;$/;"	v
u	gr_linear_wave.cpp	/^Real u[4], b[4];              \/\/ contravariant quantities$/;"	m	namespace:__anon35	file:
u0	jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon22	file:
u0	linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon9	file:
ul	shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon27	file:
use_gl_quadrature	mignone_advection.cpp	/^constexpr bool use_gl_quadrature = true;$/;"	m	namespace:__anon42	file:
use_gl_quadrature	slotted_cylinder.cpp	/^constexpr bool use_gl_quadrature = true;$/;"	m	namespace:__anon40	file:
user_dt	collision_multipledust.cpp	/^Real v0, t0, x0, user_dt;$/;"	m	namespace:__anon16	file:
v0	collision_multipledust.cpp	/^Real v0, t0, x0, user_dt;$/;"	m	namespace:__anon16	file:
v0	jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon22	file:
v0	visc.cpp	/^Real v0, t0;$/;"	m	namespace:__anon15	file:
v0	visc_dustfluids.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon34	file:
v_par	cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon44	file:
v_perp	cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon44	file:
va	jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon22	file:
vertical	gr_torus.cpp	/^enum class MagneticFieldConfigs {vertical, normal, renorm};$/;"	m	class:MagneticFieldConfigs	file:
vflow	kh.cpp	/^Real vflow;$/;"	m	namespace:__anon32	file:
vflow	linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon9	file:
volume	gr_linear_wave.cpp	/^AthenaArray<Real> volume;     \/\/ 1D array of volumes$/;"	v
volume	hb3.cpp	/^AthenaArray<Real> volume; \/\/ 1D array of volumes$/;"	m	namespace:__anon28	file:
vr	magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon19	file:
vx	gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	m	namespace:__anon35	file:
vx_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
vx_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
vy	gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	m	namespace:__anon35	file:
vy0	field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon23	file:
vy_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
vy_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
vz	gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	m	namespace:__anon35	file:
vz_amb	jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon18	file:
vz_jet	jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon18	file:
w0	jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon22	file:
wave_flag	linear_wave.cpp	/^int wave_flag;$/;"	m	namespace:__anon9	file:
wavedamping	disk.cpp	/^void wavedamping(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon21
wavenumber	gr_linear_wave.cpp	/^Real wavenumber;              \/\/ wavenumber$/;"	m	namespace:__anon35	file:
width_dampingzone	disk.cpp	/^Real inner_dampingzone_1, outer_dampingzone_1, inner_dampingzone_2, outer_dampingzone_2, width_dampingzone;$/;"	m	namespace:__anon20	file:
x0	collision_multipledust.cpp	/^Real v0, t0, x0, user_dt;$/;"	m	namespace:__anon16	file:
x0	resist.cpp	/^Real x0, t0;$/;"	m	namespace:__anon11	file:
x0	visc_dustfluids.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon34	file:
x1_max	gr_torus.cpp	/^Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	m	namespace:__anon25	file:
x1_min	gr_torus.cpp	/^Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	m	namespace:__anon25	file:
x1size	hb3.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon28	file:
x1size	ssheet.cpp	/^Real x1size,x2size,x3size;$/;"	m	namespace:__anon46	file:
x2_0	jet.cpp	/^Real gm1, x2_0, x3_0;$/;"	m	namespace:__anon18	file:
x2_max	gr_torus.cpp	/^Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	m	namespace:__anon25	file:
x2_min	gr_torus.cpp	/^Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	m	namespace:__anon25	file:
x2size	hb3.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon28	file:
x2size	ssheet.cpp	/^Real x1size,x2size,x3size;$/;"	m	namespace:__anon46	file:
x3_0	jet.cpp	/^Real gm1, x2_0, x3_0;$/;"	m	namespace:__anon18	file:
x3_max	gr_torus.cpp	/^Real x3_min, x3_max;                        \/\/ 3D limits in chosen coordinates$/;"	m	namespace:__anon25	file:
x3_min	gr_torus.cpp	/^Real x3_min, x3_max;                        \/\/ 3D limits in chosen coordinates$/;"	m	namespace:__anon25	file:
x3size	hb3.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon28	file:
x3size	ssheet.cpp	/^Real x1size,x2size,x3size;$/;"	m	namespace:__anon46	file:
xc	field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon23	file:
yc	field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon23	file:
zc	field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon23	file:
